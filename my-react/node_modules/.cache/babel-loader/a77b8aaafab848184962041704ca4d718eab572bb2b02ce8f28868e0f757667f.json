{"ast":null,"code":"import React, { useState } from 'react';\nimport axios from 'axios';\nconst ActualizarPerfil = async (req, res) => {\n  try {\n    const {\n      nombre,\n      email\n    } = req.body;\n    const id_usuario = req.id_usuario; // Extraemos el ID del usuario del token\n\n    // Buscar el usuario en la base de datos por su ID\n    const usuario = await UsuarioModel.findByPk(id_usuario);\n    if (!usuario) {\n      return res.status(404).json({\n        message: 'Usuario no encontrado'\n      });\n    }\n\n    // Verificar si el nuevo email ya está en uso\n    if (email !== usuario.email) {\n      const existingUser = await UsuarioModel.findOne({\n        where: {\n          email\n        }\n      });\n      if (existingUser) {\n        return res.status(400).json({\n          message: 'El correo electrónico ya está en uso'\n        });\n      }\n    }\n\n    // Actualizar el perfil\n    await usuario.update({\n      nombre,\n      email\n    });\n    res.json({\n      message: 'Perfil actualizado exitosamente',\n      usuario: {\n        id_usuario: usuario.id_usuario,\n        nombre: usuario.nombre,\n        email: usuario.email\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      message: 'Error del servidor'\n    });\n  }\n};\n_c = ActualizarPerfil;\nexport default ActualizarPerfil;\nvar _c;\n$RefreshReg$(_c, \"ActualizarPerfil\");","map":{"version":3,"names":["React","useState","axios","ActualizarPerfil","req","res","nombre","email","body","id_usuario","usuario","UsuarioModel","findByPk","status","json","message","existingUser","findOne","where","update","error","console","_c","$RefreshReg$"],"sources":["C:/Biblioteca Pública/my-react/src/components/ConfiguracionPerfil.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ActualizarPerfil = async (req, res) => {\r\n  try {\r\n    const { nombre, email } = req.body;\r\n    const id_usuario = req.id_usuario; // Extraemos el ID del usuario del token\r\n\r\n    // Buscar el usuario en la base de datos por su ID\r\n    const usuario = await UsuarioModel.findByPk(id_usuario);\r\n    if (!usuario) {\r\n      return res.status(404).json({ message: 'Usuario no encontrado' });\r\n    }\r\n\r\n    // Verificar si el nuevo email ya está en uso\r\n    if (email !== usuario.email) {\r\n      const existingUser = await UsuarioModel.findOne({ where: { email } });\r\n      if (existingUser) {\r\n        return res.status(400).json({ message: 'El correo electrónico ya está en uso' });\r\n      }\r\n    }\r\n\r\n    // Actualizar el perfil\r\n    await usuario.update({ nombre, email });\r\n\r\n    res.json({\r\n      message: 'Perfil actualizado exitosamente',\r\n      usuario: {\r\n        id_usuario: usuario.id_usuario,\r\n        nombre: usuario.nombre,\r\n        email: usuario.email,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error del servidor' });\r\n  }\r\n};\r\n\r\n\r\nexport default ActualizarPerfil;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,IAAI;IACF,MAAM;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGH,GAAG,CAACI,IAAI;IAClC,MAAMC,UAAU,GAAGL,GAAG,CAACK,UAAU,CAAC,CAAC;;IAEnC;IACA,MAAMC,OAAO,GAAG,MAAMC,YAAY,CAACC,QAAQ,CAACH,UAAU,CAAC;IACvD,IAAI,CAACC,OAAO,EAAE;MACZ,OAAOL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAwB,CAAC,CAAC;IACnE;;IAEA;IACA,IAAIR,KAAK,KAAKG,OAAO,CAACH,KAAK,EAAE;MAC3B,MAAMS,YAAY,GAAG,MAAML,YAAY,CAACM,OAAO,CAAC;QAAEC,KAAK,EAAE;UAAEX;QAAM;MAAE,CAAC,CAAC;MACrE,IAAIS,YAAY,EAAE;QAChB,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAuC,CAAC,CAAC;MAClF;IACF;;IAEA;IACA,MAAML,OAAO,CAACS,MAAM,CAAC;MAAEb,MAAM;MAAEC;IAAM,CAAC,CAAC;IAEvCF,GAAG,CAACS,IAAI,CAAC;MACPC,OAAO,EAAE,iCAAiC;MAC1CL,OAAO,EAAE;QACPD,UAAU,EAAEC,OAAO,CAACD,UAAU;QAC9BH,MAAM,EAAEI,OAAO,CAACJ,MAAM;QACtBC,KAAK,EAAEG,OAAO,CAACH;MACjB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBf,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAqB,CAAC,CAAC;EACzD;AACF,CAAC;AAACO,EAAA,GAlCInB,gBAAgB;AAqCtB,eAAeA,gBAAgB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}