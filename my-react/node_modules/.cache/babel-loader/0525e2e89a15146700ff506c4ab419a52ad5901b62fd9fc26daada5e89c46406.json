{"ast":null,"code":"//import React, { useState, useEffect } from 'react';\n//import { useNavigate, useParams } from 'react-router-dom';\n//import axios from 'axios';\n//import { Modal, Button } from 'react-bootstrap';\n//import './FormularioReserva.css'\n\n/*const CompReservaForm = () => {\r\n  const { id_libro } = useParams();\r\n  const [formData, setFormData] = useState({\r\n    titulo: '',\r\n    id_libro: id_libro || '',\r\n    id_usuario: '',\r\n    nombres: '',\r\n    ap_paterno: '',\r\n    ap_materno: '',\r\n    fecha_reserva: '',\r\n    estado: 'activo',\r\n  });\r\n\r\n  const [reservationSuccess, setReservationSuccess] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n  const [showModal, setShowModal] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      navigate('/login');\r\n    }\r\n\r\n    // Cargar el título del libro utilizando el ID del libro\r\n    const fetchBookTitle = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8000/libros/${id_libro}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setFormData((prev) => ({\r\n          ...prev,\r\n          titulo: response.data.titulo || '', // Asignar el título al estado\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error al cargar el título del libro:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookTitle();\r\n  }, [id_libro, navigate]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post('http://localhost:8000/libros/reservar', formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      setModalMessage(response.data.message);\r\n      setReservationSuccess(true);\r\n      setShowModal(true);\r\n    } catch (error) {\r\n      setModalMessage(error.response?.data.message || 'Error al reservar el libro');\r\n      setShowModal(true);\r\n    }\r\n  };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Token de autorización no encontrado. Por favor, inicie sesión nuevamente.');\r\n        return;\r\n      }\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8000/libros/generar-pdf-reserva',\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          responseType: 'blob',\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const pdfBlob = new Blob([response.data], { type: 'application/pdf' });\r\n        const pdfUrl = window.URL.createObjectURL(pdfBlob);\r\n        const link = document.createElement('a');\r\n        link.href = pdfUrl;\r\n        link.download = `reserva_${formData.id_usuario}.pdf`;\r\n        link.click();\r\n        window.URL.revokeObjectURL(pdfUrl);\r\n      } else {\r\n        console.error('Error al generar el PDF: Respuesta inesperada', response);\r\n        alert('Error al generar el PDF. Intente nuevamente.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al generar el PDF:', error.response || error);\r\n      alert('Error al generar el PDF. Por favor, verifique la consola para más detalles.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-reserva\">\r\n      <h2>Formulario de Reserva</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Título del Libro\r\n          <input type=\"text\" name=\"titulo\" value={formData.titulo} readOnly />\r\n        </label>\r\n        <label>\r\n          Nombre(s)\r\n          <input\r\n            type=\"text\"\r\n            name=\"nombres\"\r\n            value={formData.nombres}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Apellido Paterno\r\n          <input\r\n            type=\"text\"\r\n            name=\"ap_paterno\"\r\n            value={formData.ap_paterno}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Apellido Materno\r\n          <input\r\n            type=\"text\"\r\n            name=\"ap_materno\"\r\n            value={formData.ap_materno}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Fecha de Reserva\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha_reserva\"\r\n            value={formData.fecha_reserva}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Reservar</button>\r\n      </form>\r\n\r\n      {/* Modal de Bootstrap */\n//<Modal show={showModal} onHide={() => setShowModal(false)}className=\"modal-reserva\">\n// <Modal.Header closeButton className=\"modal-r-header\">\n//   <Modal.Title className=\"modal-r-titulo\">Resultado de la Reserva</Modal.Title>\n//</Modal.Header>\n//<Modal.Body className=\"modal-r-body\">\n//<p>{modalMessage}</p>\n//{reservationSuccess && (\n//<Button variant=\"primary\" className=\"modal-r-boton\" onClick={handleGeneratePDF}>\n//Generar PDF\n//</Button>\n//)}\n//</Modal.Body>\n//<Modal.Footer  className=\"modal-r-footer\">\n// <Button variant=\"secondary\" className=\"modal-r-boton-cerrar\" onClick={() => setShowModal(false)}>\n//  Cerrar\n// </Button>\n// </Modal.Footer>\n//</Modal>\n//</div>\n//);\n//};\n\n//export default CompReservaForm;","map":{"version":3,"names":[],"sources":["C:/Biblioteca Pública/my-react/src/components/FormularioReserva.js"],"sourcesContent":["//import React, { useState, useEffect } from 'react';\r\n//import { useNavigate, useParams } from 'react-router-dom';\r\n//import axios from 'axios';\r\n//import { Modal, Button } from 'react-bootstrap';\r\n//import './FormularioReserva.css'\r\n\r\n/*const CompReservaForm = () => {\r\n  const { id_libro } = useParams();\r\n  const [formData, setFormData] = useState({\r\n    titulo: '',\r\n    id_libro: id_libro || '',\r\n    id_usuario: '',\r\n    nombres: '',\r\n    ap_paterno: '',\r\n    ap_materno: '',\r\n    fecha_reserva: '',\r\n    estado: 'activo',\r\n  });\r\n\r\n  const [reservationSuccess, setReservationSuccess] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n  const [showModal, setShowModal] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      navigate('/login');\r\n    }\r\n\r\n    // Cargar el título del libro utilizando el ID del libro\r\n    const fetchBookTitle = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8000/libros/${id_libro}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setFormData((prev) => ({\r\n          ...prev,\r\n          titulo: response.data.titulo || '', // Asignar el título al estado\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error al cargar el título del libro:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookTitle();\r\n  }, [id_libro, navigate]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post('http://localhost:8000/libros/reservar', formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      setModalMessage(response.data.message);\r\n      setReservationSuccess(true);\r\n      setShowModal(true);\r\n    } catch (error) {\r\n      setModalMessage(error.response?.data.message || 'Error al reservar el libro');\r\n      setShowModal(true);\r\n    }\r\n  };\r\n\r\n  const handleGeneratePDF = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Token de autorización no encontrado. Por favor, inicie sesión nuevamente.');\r\n        return;\r\n      }\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8000/libros/generar-pdf-reserva',\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          responseType: 'blob',\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        const pdfBlob = new Blob([response.data], { type: 'application/pdf' });\r\n        const pdfUrl = window.URL.createObjectURL(pdfBlob);\r\n        const link = document.createElement('a');\r\n        link.href = pdfUrl;\r\n        link.download = `reserva_${formData.id_usuario}.pdf`;\r\n        link.click();\r\n        window.URL.revokeObjectURL(pdfUrl);\r\n      } else {\r\n        console.error('Error al generar el PDF: Respuesta inesperada', response);\r\n        alert('Error al generar el PDF. Intente nuevamente.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al generar el PDF:', error.response || error);\r\n      alert('Error al generar el PDF. Por favor, verifique la consola para más detalles.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-reserva\">\r\n      <h2>Formulario de Reserva</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Título del Libro\r\n          <input type=\"text\" name=\"titulo\" value={formData.titulo} readOnly />\r\n        </label>\r\n        <label>\r\n          Nombre(s)\r\n          <input\r\n            type=\"text\"\r\n            name=\"nombres\"\r\n            value={formData.nombres}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Apellido Paterno\r\n          <input\r\n            type=\"text\"\r\n            name=\"ap_paterno\"\r\n            value={formData.ap_paterno}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Apellido Materno\r\n          <input\r\n            type=\"text\"\r\n            name=\"ap_materno\"\r\n            value={formData.ap_materno}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Fecha de Reserva\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha_reserva\"\r\n            value={formData.fecha_reserva}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Reservar</button>\r\n      </form>\r\n\r\n      {/* Modal de Bootstrap */\r\n      //<Modal show={showModal} onHide={() => setShowModal(false)}className=\"modal-reserva\">\r\n       // <Modal.Header closeButton className=\"modal-r-header\">\r\n       //   <Modal.Title className=\"modal-r-titulo\">Resultado de la Reserva</Modal.Title>\r\n        //</Modal.Header>\r\n        //<Modal.Body className=\"modal-r-body\">\r\n          //<p>{modalMessage}</p>\r\n          //{reservationSuccess && (\r\n            //<Button variant=\"primary\" className=\"modal-r-boton\" onClick={handleGeneratePDF}>\r\n              //Generar PDF\r\n            //</Button>\r\n          //)}\r\n        //</Modal.Body>\r\n        //<Modal.Footer  className=\"modal-r-footer\">\r\n         // <Button variant=\"secondary\" className=\"modal-r-boton-cerrar\" onClick={() => setShowModal(false)}>\r\n          //  Cerrar\r\n         // </Button>\r\n       // </Modal.Footer>\r\n      //</Modal>\r\n    //</div>\r\n  //);\r\n//};\r\n\r\n//export default CompReservaForm;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}