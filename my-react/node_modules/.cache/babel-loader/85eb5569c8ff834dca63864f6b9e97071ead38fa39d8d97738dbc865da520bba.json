{"ast":null,"code":"var _jsxFileName = \"C:\\\\Biblioteca P\\xFAblica\\\\my-react\\\\src\\\\components\\\\RestablecerContrasena.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RestablecerContrasena = () => {\n  _s();\n  const {\n    token\n  } = useParams(); // Obtener el token desde la URL\n  const [isTokenValid, setIsTokenValid] = useState(false);\n  const [nuevaContrasena, setNuevaContrasena] = useState('');\n  const [mensaje, setMensaje] = useState('');\n  useEffect(() => {\n    // Verificar el token con el backend\n    axios.get(`http://localhost:8000/usuarios/restablecer-contrasena/${token}`).then(response => {\n      if (response.data.isValid) {\n        setIsTokenValid(true); // El token es válido, mostrar el formulario\n      }\n    }).catch(error => {\n      setMensaje('El token no es válido o ha expirado');\n    });\n  }, [token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!nuevaContrasena) {\n      setMensaje('La nueva contraseña no puede estar vacía');\n      return;\n    }\n    try {\n      const response = await axios.post(`http://localhost:8000/usuarios/restablecer/${token}`, {\n        nuevaContrasena\n      });\n      setMensaje(response.data.message); // Mensaje de éxito\n    } catch (error) {\n      setMensaje('Error al actualizar la contraseña');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isTokenValid ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nuevaContrasena\",\n          children: \"Nueva Contrase\\xF1a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"nuevaContrasena\",\n          value: nuevaContrasena,\n          onChange: e => setNuevaContrasena(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Restablecer Contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mensaje\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(RestablecerContrasena, \"A1NORCH0tm+eTmTlN0vT/5BqmyU=\", false, function () {\n  return [useParams];\n});\n_c = RestablecerContrasena;\nexport default RestablecerContrasena;\nvar _c;\n$RefreshReg$(_c, \"RestablecerContrasena\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","RestablecerContrasena","_s","token","isTokenValid","setIsTokenValid","nuevaContrasena","setNuevaContrasena","mensaje","setMensaje","get","then","response","data","isValid","catch","error","handleSubmit","e","preventDefault","post","message","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Biblioteca Pública/my-react/src/components/RestablecerContrasena.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst RestablecerContrasena = () => {\r\n  const { token } = useParams(); // Obtener el token desde la URL\r\n  const [isTokenValid, setIsTokenValid] = useState(false);\r\n  const [nuevaContrasena, setNuevaContrasena] = useState('');\r\n  const [mensaje, setMensaje] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Verificar el token con el backend\r\n    axios.get(`http://localhost:8000/usuarios/restablecer-contrasena/${token}`)\r\n      .then(response => {\r\n        if (response.data.isValid) {\r\n          setIsTokenValid(true); // El token es válido, mostrar el formulario\r\n        }\r\n      })\r\n      .catch(error => {\r\n        setMensaje('El token no es válido o ha expirado');\r\n      });\r\n  }, [token]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!nuevaContrasena) {\r\n      setMensaje('La nueva contraseña no puede estar vacía');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `http://localhost:8000/usuarios/restablecer/${token}`,\r\n        { nuevaContrasena }\r\n      );\r\n      setMensaje(response.data.message); // Mensaje de éxito\r\n    } catch (error) {\r\n      setMensaje('Error al actualizar la contraseña');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isTokenValid ? (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"nuevaContrasena\">Nueva Contraseña</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"nuevaContrasena\"\r\n              value={nuevaContrasena}\r\n              onChange={(e) => setNuevaContrasena(e.target.value)}\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Restablecer Contraseña</button>\r\n        </form>\r\n      ) : (\r\n        <p>{mensaje}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RestablecerContrasena;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}