{"ast":null,"code":"import axios from 'axios';\n\n// Función para verificar si el usuario está autenticado\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token; // Devuelve true si hay un token\n};\n\n// Función para obtener el token\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para guardar el token\nexport const setToken = token => {\n  localStorage.setItem('token', token);\n};\n\n// Función para eliminar el token (logout)\nexport const removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Función para realizar el login\nexport const login = async (email, contrasena) => {\n  try {\n    const response = await axios.post('http://localhost:8000/login', {\n      email,\n      contrasena\n    });\n    const {\n      token\n    } = response.data;\n    setToken(token);\n    return true;\n  } catch (error) {\n    console.error('Error durante el login:', error);\n    return false;\n  }\n};\n\n// Función para realizar el logout\nexport const logout = () => {\n  removeToken();\n};\n\n// Configurar axios para incluir el token en todas las peticiones\naxios.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Manejar errores de autenticación globalmente\naxios.interceptors.response.use(response => response, error => {\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    // Token no válido o expirado\n    removeToken();\n    // Aquí puedes agregar lógica adicional, como redirigir al login\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","isAuthenticated","token","localStorage","getItem","getToken","setToken","setItem","removeToken","removeItem","login","email","contrasena","response","post","data","error","console","logout","interceptors","request","use","config","headers","Promise","reject","status","window","location","href"],"sources":["C:/Biblioteca Pública/my-react/src/Autenticación/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Función para verificar si el usuario está autenticado\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  return !!token; // Devuelve true si hay un token\r\n};\r\n\r\n// Función para obtener el token\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// Función para guardar el token\r\nexport const setToken = (token) => {\r\n  localStorage.setItem('token', token);\r\n};\r\n\r\n// Función para eliminar el token (logout)\r\nexport const removeToken = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Función para realizar el login\r\nexport const login = async (email, contrasena) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:8000/login', { email, contrasena });\r\n    const { token } = response.data;\r\n    setToken(token);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante el login:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para realizar el logout\r\nexport const logout = () => {\r\n  removeToken();\r\n};\r\n\r\n// Configurar axios para incluir el token en todas las peticiones\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Manejar errores de autenticación globalmente\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      // Token no válido o expirado\r\n      removeToken();\r\n      // Aquí puedes agregar lógica adicional, como redirigir al login\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,CAAC,CAACF,KAAK,CAAC,CAAC;AAClB,CAAC;;AAED;AACA,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAIJ,KAAK,IAAK;EACjCC,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;AACtC,CAAC;;AAED;AACA,OAAO,MAAMM,WAAW,GAAGA,CAAA,KAAM;EAC/BL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,UAAU,KAAK;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,6BAA6B,EAAE;MAAEH,KAAK;MAAEC;IAAW,CAAC,CAAC;IACvF,MAAM;MAAEV;IAAM,CAAC,GAAGW,QAAQ,CAACE,IAAI;IAC/BT,QAAQ,CAACJ,KAAK,CAAC;IACf,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAME,MAAM,GAAGA,CAAA,KAAM;EAC1BV,WAAW,CAAC,CAAC;AACf,CAAC;;AAED;AACAR,KAAK,CAACmB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV,MAAMpB,KAAK,GAAGG,QAAQ,CAAC,CAAC;EACxB,IAAIH,KAAK,EAAE;IACToB,MAAM,CAACC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUrB,KAAK,EAAE;EACrD;EACA,OAAOoB,MAAM;AACf,CAAC,EACAN,KAAK,IAAK;EACT,OAAOQ,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,KAAK,CAACmB,YAAY,CAACN,QAAQ,CAACQ,GAAG,CAC5BR,QAAQ,IAAKA,QAAQ,EACrBG,KAAK,IAAK;EACT,IAAIA,KAAK,CAACH,QAAQ,KAAKG,KAAK,CAACH,QAAQ,CAACa,MAAM,KAAK,GAAG,IAAIV,KAAK,CAACH,QAAQ,CAACa,MAAM,KAAK,GAAG,CAAC,EAAE;IACtF;IACAlB,WAAW,CAAC,CAAC;IACb;IACAmB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOL,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}